/**
 * AI Gateway
 * A platform for machine learning & high performance computing 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountInfo', 'model/AccountInfo1', 'model/Configuration', 'model/Endpoints', 'model/Error', 'model/Session', 'model/Versions'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccountInfo'), require('../model/AccountInfo1'), require('../model/Configuration'), require('../model/Endpoints'), require('../model/Error'), require('../model/Session'), require('../model/Versions'));
  } else {
    // Browser globals (root is window)
    if (!root.AiGateway) {
      root.AiGateway = {};
    }
    root.AiGateway.AppApi = factory(root.AiGateway.ApiClient, root.AiGateway.AccountInfo, root.AiGateway.AccountInfo1, root.AiGateway.Configuration, root.AiGateway.Endpoints, root.AiGateway.Error, root.AiGateway.Session, root.AiGateway.Versions);
  }
}(this, function(ApiClient, AccountInfo, AccountInfo1, Configuration, Endpoints, Error, Session, Versions) {
  'use strict';

  /**
   * App service.
   * @module api/AppApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AppApi. 
   * @alias module:api/AppApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getConfigurations operation.
     * @callback module:api/AppApi~getConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Configuration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns app configurations 
     * @param {module:api/AppApi~getConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Configuration}
     */
    this.getConfigurations = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Configuration;

      return this.apiClient.callApi(
        '/configurations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndpoints operation.
     * @callback module:api/AppApi~getEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoints} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns third-party endpoints 
     * @param {module:api/AppApi~getEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoints}
     */
    this.getEndpoints = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Endpoints;

      return this.apiClient.callApi(
        '/endpoints', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersions operation.
     * @callback module:api/AppApi~getVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Versions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns application versions 
     * @param {module:api/AppApi~getVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Versions}
     */
    this.getVersions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Versions;

      return this.apiClient.callApi(
        '/versions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postConfigurations operation.
     * @callback module:api/AppApi~postConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * set app configurations 
     * @param {module:model/AccountInfo} body 
     * @param {module:api/AppApi~postConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.postConfigurations = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postConfigurations");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/configurations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postNewSession operation.
     * @callback module:api/AppApi~postNewSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * login 
     * @param {module:model/AccountInfo1} body 
     * @param {module:api/AppApi~postNewSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.postNewSession = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postNewSession");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/sessions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
