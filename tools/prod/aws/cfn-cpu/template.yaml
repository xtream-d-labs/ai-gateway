AWSTemplateFormatVersion: '2010-09-09'
Description: "aigateway"

Outputs:
  PublicIPs:
    Value: !Sub "for id in $( aws --region ${AWS::Region} autoscaling describe-auto-scaling-instances --query \"AutoScalingInstances[?AutoScalingGroupName=='${ASG}'].InstanceId\" --output text ); do aws --region ${AWS::Region} ec2 describe-instances --instance-ids $id --query \"Reservations[0].Instances[0].PublicIpAddress\" --output=text; done"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2 Configurations
        Parameters:
          - InstanceType
          - Capacity
          - AllowSSH
          - KeyName
          - AMI
      - Label:
          default: Docker Configurations
        Parameters:
          - InsecureRegistry
    ParameterLabels:
      AMI:
        default: "AMI for the host VM"
      InstanceType:
        default: "Instance Type"
      Capacity:
        default: "Number of instances"
      AllowSSH:
        default: "Allow users to ssh"
      KeyName:
        default: "KeyPair Name"

Parameters:
  AMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: SSM ParameterStore Key for the AMI
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  InstanceType:
    Type: String
    AllowedValues:
      - t3.micro
      - c5.large
    Default: t3.micro

  Capacity:
    Type: Number
    Default: 1

  AllowSSH:
    Type: String
    AllowedValues:
    - "true"
    - "false"
    Default: "false"

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName

  InsecureRegistry:
    Type: String
    Default: "localhost"

Conditions:
  IsAllowedSSH: !Equals [ !Ref AllowSSH, "true" ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: 10.0.0.0/17
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} PublicSubnet 1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: 10.0.128.0/17
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} PublicSubnet 2'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Public'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for public access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - !If
          - IsAllowedSSH
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 30000
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} PublicAccess'

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
      AutoScalingReplacingUpdate:
        WillReplace: true
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName:
        Ref: Config
      DesiredCapacity: !Ref Capacity
      MaxSize: 20
      MinSize: 1
      MetricsCollection:
        - Granularity: 1Minute
      HealthCheckGracePeriod: 120
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true

  Config:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref PublicAccess
      AssociatePublicIpAddress: true
      UserData:
        "Fn::Base64": !Sub |
            #cloud-config
            repo_update: true
            repo_upgrade: all

            packages:
              - docker
              - aws-cfn-bootstrap

            write_files:
              - path: /home/ec2-user/.env
                permissions: '0666'
                content: |
                  SS_LOG_LEVEL=debug
                  PWD=/home/ec2-user

              - path: /etc/sysconfig/docker
                permissions: '0666'
                content: |
                  DAEMON_MAXFILES=1048576
                  OPTIONS="--default-ulimit nofile=1024:4096 --insecure-registry ${InsecureRegistry}"
                  DAEMON_PIDFILE_TIMEOUT=10

              - path: /etc/systemd/system/aigateway.service
                permissions: '0666'
                content: |
                  [Unit]
                  Description=AI Gateway services
                  After=docker.service
                  Requires=docker.service

                  [Service]
                  Type=simple
                  EnvironmentFile=/home/ec2-user/.env
                  ExecStartPre=-/usr/local/bin/docker-compose -f /home/ec2-user/docker-compose.yml down
                  ExecStart=/usr/local/bin/docker-compose -f /home/ec2-user/docker-compose.yml up --force-recreate --abort-on-container-exit
                  ExecStop=/usr/local/bin/docker-compose -f /home/ec2-user/docker-compose.yml down
                  Restart=always
                  RestartSec=60s

                  [Install]
                  WantedBy=multi-user.target

            runcmd:
              - curl -L https://github.com/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
              - chmod +x /usr/local/bin/docker-compose
              - usermod -aG docker ec2-user
              - systemctl enable docker
              - systemctl start docker
              - echo 'SS_API_ENDPOINT=http://'$( curl -s http://169.254.169.254/latest/meta-data/public-ipv4 ) >> /home/ec2-user/.env
              - curl -L https://s3-ap-northeast-1.amazonaws.com/ai-gateway/docker-compose.yml -o /home/ec2-user/docker-compose.yml
              - systemctl enable aigateway
              - systemctl start aigateway
              - docker pull aigateway/singularity:2.6-d2s
              - docker pull tensorflow/tensorflow:2.3.0
              - docker pull mxnet/python:1.5.0_cpu_py3
              - docker pull chainer/chainer:v7.7.0-intel-python3
              - /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource Config
              - /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ASG
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource Config
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
