// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotebookDetail Rescale Job information
//
// swagger:model NotebookDetail
type NotebookDetail struct {

	// ended unix timestamp
	// Format: date-time
	Ended strfmt.DateTime `json:"ended,omitempty"`

	// the container ID
	// Required: true
	ID *string `json:"id"`

	// the container labels
	Mounts []string `json:"mounts"`

	// the container name
	Name string `json:"name,omitempty"`

	// the container published port
	Port int64 `json:"port,omitempty"`

	// started unix timestamp
	// Format: date-time
	Started strfmt.DateTime `json:"started,omitempty"`

	// state of the container
	State string `json:"state,omitempty"`

	// Jupyter notebook's login token
	// Required: true
	Token *string `json:"token"`
}

// Validate validates this notebook detail
func (m *NotebookDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotebookDetail) validateEnded(formats strfmt.Registry) error {

	if swag.IsZero(m.Ended) { // not required
		return nil
	}

	if err := validate.FormatOf("ended", "body", "date-time", m.Ended.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NotebookDetail) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *NotebookDetail) validateStarted(formats strfmt.Registry) error {

	if swag.IsZero(m.Started) { // not required
		return nil
	}

	if err := validate.FormatOf("started", "body", "date-time", m.Started.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NotebookDetail) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NotebookDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotebookDetail) UnmarshalBinary(b []byte) error {
	var res NotebookDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
