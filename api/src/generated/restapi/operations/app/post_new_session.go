// Code generated by go-swagger; DO NOT EDIT.

package app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostNewSessionHandlerFunc turns a function with the right signature into a post new session handler
type PostNewSessionHandlerFunc func(PostNewSessionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostNewSessionHandlerFunc) Handle(params PostNewSessionParams) middleware.Responder {
	return fn(params)
}

// PostNewSessionHandler interface for that can handle valid post new session params
type PostNewSessionHandler interface {
	Handle(PostNewSessionParams) middleware.Responder
}

// NewPostNewSession creates a new http.Handler for the post new session operation
func NewPostNewSession(ctx *middleware.Context, handler PostNewSessionHandler) *PostNewSession {
	return &PostNewSession{Context: ctx, Handler: handler}
}

/*PostNewSession swagger:route POST /sessions app postNewSession

login


*/
type PostNewSession struct {
	Context *middleware.Context
	Handler PostNewSessionHandler
}

func (o *PostNewSession) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostNewSessionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostNewSessionBody AccountInfo
//
// swagger:model PostNewSessionBody
type PostNewSessionBody struct {

	// Password for the private Docker registry
	// Required: true
	// Format: password
	DockerPassword *strfmt.Password `json:"docker_password"`

	// Username for the private Docker registry
	// Required: true
	DockerUsername *string `json:"docker_username"`
}

// Validate validates this post new session body
func (o *PostNewSessionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDockerPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDockerUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostNewSessionBody) validateDockerPassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"docker_password", "body", o.DockerPassword); err != nil {
		return err
	}

	if err := validate.FormatOf("body"+"."+"docker_password", "body", "password", o.DockerPassword.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostNewSessionBody) validateDockerUsername(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"docker_username", "body", o.DockerUsername); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostNewSessionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostNewSessionBody) UnmarshalBinary(b []byte) error {
	var res PostNewSessionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
