// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteImageHandlerFunc turns a function with the right signature into a delete image handler
type DeleteImageHandlerFunc func(DeleteImageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteImageHandlerFunc) Handle(params DeleteImageParams) middleware.Responder {
	return fn(params)
}

// DeleteImageHandler interface for that can handle valid delete image params
type DeleteImageHandler interface {
	Handle(DeleteImageParams) middleware.Responder
}

// NewDeleteImage creates a new http.Handler for the delete image operation
func NewDeleteImage(ctx *middleware.Context, handler DeleteImageHandler) *DeleteImage {
	return &DeleteImage{Context: ctx, Handler: handler}
}

/*DeleteImage swagger:route DELETE /images image deleteImage

delete a specified local image


*/
type DeleteImage struct {
	Context *middleware.Context
	Handler DeleteImageHandler
}

func (o *DeleteImage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteImageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteImageBody ImageName
//
// swagger:model DeleteImageBody
type DeleteImageBody struct {

	// Docker image name
	// Required: true
	Image *string `json:"image"`
}

// Validate validates this delete image body
func (o *DeleteImageBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteImageBody) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"image", "body", o.Image); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteImageBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteImageBody) UnmarshalBinary(b []byte) error {
	var res DeleteImageBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
