// Code generated by go-swagger; DO NOT EDIT.

package notebook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/xtream-d-labs/ai-gateway/api/src/generated/models"
)

// PostNewNotebookCreatedCode is the HTTP code returned for type PostNewNotebookCreated
const PostNewNotebookCreatedCode int = 201

/*PostNewNotebookCreated OK

swagger:response postNewNotebookCreated
*/
type PostNewNotebookCreated struct {
}

// NewPostNewNotebookCreated creates PostNewNotebookCreated with default headers values
func NewPostNewNotebookCreated() *PostNewNotebookCreated {

	return &PostNewNotebookCreated{}
}

// WriteResponse to the client
func (o *PostNewNotebookCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

/*PostNewNotebookDefault Unexpected error

swagger:response postNewNotebookDefault
*/
type PostNewNotebookDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostNewNotebookDefault creates PostNewNotebookDefault with default headers values
func NewPostNewNotebookDefault(code int) *PostNewNotebookDefault {
	if code <= 0 {
		code = 500
	}

	return &PostNewNotebookDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post new notebook default response
func (o *PostNewNotebookDefault) WithStatusCode(code int) *PostNewNotebookDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post new notebook default response
func (o *PostNewNotebookDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post new notebook default response
func (o *PostNewNotebookDefault) WithPayload(payload *models.Error) *PostNewNotebookDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post new notebook default response
func (o *PostNewNotebookDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostNewNotebookDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
