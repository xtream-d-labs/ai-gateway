// Code generated by go-swagger; DO NOT EDIT.

package notebook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostNewNotebookHandlerFunc turns a function with the right signature into a post new notebook handler
type PostNewNotebookHandlerFunc func(PostNewNotebookParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostNewNotebookHandlerFunc) Handle(params PostNewNotebookParams) middleware.Responder {
	return fn(params)
}

// PostNewNotebookHandler interface for that can handle valid post new notebook params
type PostNewNotebookHandler interface {
	Handle(PostNewNotebookParams) middleware.Responder
}

// NewPostNewNotebook creates a new http.Handler for the post new notebook operation
func NewPostNewNotebook(ctx *middleware.Context, handler PostNewNotebookHandler) *PostNewNotebook {
	return &PostNewNotebook{Context: ctx, Handler: handler}
}

/*PostNewNotebook swagger:route POST /notebooks notebook postNewNotebook

creates Jupyter notebook container


*/
type PostNewNotebook struct {
	Context *middleware.Context
	Handler PostNewNotebookHandler
}

func (o *PostNewNotebook) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostNewNotebookParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostNewNotebookBody ImageName
//
// swagger:model PostNewNotebookBody
type PostNewNotebookBody struct {

	// Docker image name
	// Required: true
	Image *string `json:"image"`

	// workspace to be mounted
	Workspace string `json:"workspace,omitempty"`
}

// Validate validates this post new notebook body
func (o *PostNewNotebookBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostNewNotebookBody) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"image", "body", o.Image); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostNewNotebookBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostNewNotebookBody) UnmarshalBinary(b []byte) error {
	var res PostNewNotebookBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
